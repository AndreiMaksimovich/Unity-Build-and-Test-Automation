<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1505.vea_4b_20a_4a_495">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2221.vc657003fb_d93"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2221.vc657003fb_d93">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>30</daysToKeep>
        <numToKeep>3</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
        <removeLastBuild>false</removeLastBuild>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>true</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableResumeJobProperty/>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.9.7">
      <gitLabConnection></gitLabConnection>
      <jobCredentialId></jobCredentialId>
      <useAlternativeCredential>false</useAlternativeCredential>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GIT_BRANCH</name>
          <description>Git branch</description>
          <defaultValue>main</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>CHECKOUT_GIT</name>
          <description>Checkout git</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RUN_EDIT_MODE_TESTS</name>
          <description>Run EditMode Tests</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RUN_PLAY_MODE_TESTS</name>
          <description>Run PlayMode Tests</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RUN_OSX_TESTS</name>
          <description>Run OSX Tests</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RUN_WEBGL_TESTS</name>
          <description>Run WebGL Tests</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@4018.vf02e01888da_f">
    <script>pipeline {
    
    agent any

    environment {
        UNITY_PATH = &apos;/Applications/Unity/Hub/Editor/6000.0.37f1/Unity.app/Contents/MacOS/Unity&apos;
        UNITY_PROJECT_PATH = &apos;/Users/andreimaksimovich/Projects/UnityJenkinsPlayground/UnityJenkinsPlayground-Unity&apos;
    }

    stages {
        
        stage(&apos;Project: Checkout Git&apos;) {
            when { expression { return params.CHECKOUT_GIT } }
            steps {
                script {
                    sh &apos;cd ${UNITY_PROJECT_PATH} &amp;&amp; git restore . &amp;&amp; git pull &amp;&amp; git checkout ${params.GIT_BRANCH}&apos;
                }
            }
        }
        
        stage(&apos;Unity: Build Addressables&apos;) {
            when { expression { return params.RUN_EDIT_MODE_TESTS || params.RUN_PLAY_MODE_TESTS || params.RUN_OSX_TESTS } }
            steps {
                sh &apos;${UNITY_PATH} -quit -batchmode -projectPath ${UNITY_PROJECT_PATH} -executeMethod BuildManager.BuildAddressablesStandaloneOSX&apos;
            }
        }
        
        stage(&apos;Unity: Run EditMode Tests&apos;) {
            when { expression { return params.RUN_EDIT_MODE_TESTS } }
            steps {
                sh &apos;${UNITY_PATH} -runTests -batchmode -projectPath ${UNITY_PROJECT_PATH} -testPlatform EditMode -logfile stdout -testResults ${WORKSPACE}/test-results.xml&apos;
            }
        }
        
        stage(&apos;NUnity: Check Unity EditMode Test Result XML&apos;) {
            when { expression { return params.RUN_EDIT_MODE_TESTS } }
            steps {
                nunit testResultsPattern: &apos;test-results.xml&apos;
            }
        }
        
        stage(&apos;Unity: Run PlayMode Tests&apos;) {
            when { expression { return params.RUN_PLAY_MODE_TESTS } }
            steps {
                sh &apos;${UNITY_PATH} -runTests -batchmode -projectPath ${UNITY_PROJECT_PATH} -testPlatform PlayMode -logfile stdout -testResults ${WORKSPACE}/test-results.xml&apos;
            }
        }
        
        stage(&apos;NUnity: Check Unity PlayMode Test Result XML&apos;) {
            when { expression { return params.RUN_PLAY_MODE_TESTS } }
            steps {
                nunit testResultsPattern: &apos;test-results.xml&apos;
            }
        }
        
        stage(&apos;Unity: Run StandaloneOSX Tests&apos;) {
            when { expression { return params.RUN_OSX_TESTS } }
            steps {
                sh &apos;${UNITY_PATH} -runTests -batchmode -projectPath ${UNITY_PROJECT_PATH} -testPlatform StandaloneOSX -logfile stdout -testResults ${WORKSPACE}/test-results.xml&apos;
            }
        }
        
        stage(&apos;NUnity: Check Unity StandaloneOSX Test Result XML&apos;) {
            when { expression { return params.RUN_OSX_TESTS } }
            steps {
                nunit testResultsPattern: &apos;test-results.xml&apos;
            }
        }
        
        stage(&apos;Unity: Build Addressables WebGL&apos;) {
            when { expression { return params.RUN_WEBGL_TESTS } }
            steps {
                sh &apos;${UNITY_PATH} -quit -batchmode -projectPath ${UNITY_PROJECT_PATH} -executeMethod BuildManager.BuildAddressablesWebGL&apos;
            }
        }
        
        stage(&apos;Unity: Run WebGL Tests&apos;) {
            when { expression { return params.RUN_WEBGL_TESTS } }
            steps {
                sh &apos;${UNITY_PATH} -runTests -batchmode -projectPath ${UNITY_PROJECT_PATH} -testPlatform WebGL -logfile stdout -testResults ${WORKSPACE}/test-results.xml&apos;
            }
        }
        
        stage(&apos;NUnity: Check Unity WebGL Test Result XML&apos;) {
            when { expression { return params.RUN_WEBGL_TESTS } }
            steps {
                nunit testResultsPattern: &apos;test-results.xml&apos;
            }
        }
        
    }
    post {
        failure {
            script {
                sh &apos;cat ${WORKSPACE}/test-results.xml&apos;
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>