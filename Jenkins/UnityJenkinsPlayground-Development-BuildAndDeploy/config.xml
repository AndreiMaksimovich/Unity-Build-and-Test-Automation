<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1505.vea_4b_20a_4a_495">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2221.vc657003fb_d93"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2221.vc657003fb_d93">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>30</daysToKeep>
        <numToKeep>3</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
        <removeLastBuild>false</removeLastBuild>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>true</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.9.7">
      <gitLabConnection></gitLabConnection>
      <jobCredentialId></jobCredentialId>
      <useAlternativeCredential>false</useAlternativeCredential>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GIT_BRANCH</name>
          <description>Git branch</description>
          <defaultValue>main</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>CHECKOUT_GIT</name>
          <description>Checkout git</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>BAKE_LIGHTING</name>
          <description>Bake lighting</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>BUILD_WEBGL</name>
          <description>Build WebGL</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>BUILD_ANDROID</name>
          <description>Build Android</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>DEPLOY_ANDROID</name>
          <description>Deploy Android</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>BUILD_IOS</name>
          <description>Build iOS</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>DEPLOY_IOS</name>
          <description>Deploy iOS</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@4018.vf02e01888da_f">
    <script>pipeline {
    agent any

    environment {
        UNITY_PATH = &apos;/Applications/Unity/Hub/Editor/6000.0.37f1/Unity.app/Contents/MacOS/Unity&apos;
        UNITY_PROJECT_PATH = &apos;/Users/andreimaksimovich/Projects/UnityJenkinsPlayground/UnityJenkinsPlayground-Unity&apos;
        BUILDS_DIR = &apos;/Users/andreimaksimovich/Projects/UnityJenkinsPlayground/Builds&apos;
        ANDROID_SDK_PATH = &apos;/Users/andreimaksimovich/Library/Android/sdk&apos;
        UNITY_PROJECT_NAME = &apos;JenkinsPlayground&apos;
        XCODE_PROJECT_PATH = &apos;/Users/andreimaksimovich/Projects/UnityJenkinsPlayground/Builds/iOS&apos;
        CFGUTIL_PATH = &apos;/usr/local/bin/cfgutil&apos;
    }
    
    stages {
        
        stage(&apos;Project: Checkout Git&apos;) {
            when { expression { return params.CHECKOUT_GIT } }
            steps {
                script {
                    sh &apos;cd ${UNITY_PROJECT_PATH} &amp;&amp; git restore . &amp;&amp; git pull &amp;&amp; git checkout ${GIT_BRANCH}&apos;
                }
            }
        }
        
        stage(&apos;Unity: Bake Lighting&apos;) {
            when { expression { return params.BAKE_LIGHTING } }
            steps {
                sh &apos;${UNITY_PATH} -quit -batchmode -projectPath ${UNITY_PROJECT_PATH} -executeMethod LightBaker.BakeLighting&apos;
            }
        }
        
        stage(&apos;Unity: Build WebGL Desktop &amp; Mobile&apos;) {
            when { expression { return params.BUILD_WEBGL } }
            steps {
                sh &apos;${UNITY_PATH} -quit -batchmode -projectPath ${UNITY_PROJECT_PATH} -executeMethod BuildManager.BuildWebGLMobileAndDesktopDevelopment&apos;
            }
        }
        
        stage(&apos;Unity: Build  iOS&apos;) {
            when { expression { return params.BUILD_IOS } }
            steps {
                sh &apos;${UNITY_PATH} -quit -batchmode -projectPath ${UNITY_PROJECT_PATH} -executeMethod BuildManager.BuildIOSDevelopment&apos;
            }
        }
        
        stage(&apos;XCode: Build iOS Project&apos;) {
            when { expression { return params.BUILD_IOS &amp;&amp; params.DEPLOY_IOS } }
            steps {
                xcodeBuild(
                    buildIpa: true, 
                    ipaExportMethod: &apos;development&apos;,
                    configuration: &apos;Debug&apos;, 
                    generateArchive: true, 
                    keychainId: &apos;ProvisionProfiles&apos;,
                    signingMethod: &apos;readFromProject&apos;,
                    unlockKeychain: true, 
                    xcodeProjectFile: &apos;Unity-iPhone.xcodeproj&apos;, 
                    xcodeProjectPath: XCODE_PROJECT_PATH, 
                    xcodeSchema: &apos;Unity-iPhone&apos;)
            }
        }
        
        stage(&apos;Deploy: iOS App&apos;) {
            when { expression { return params.BUILD_IOS &amp;&amp; params.DEPLOY_IOS } }
            steps {
                sh &apos;cd ${BUILDS_DIR}/iOS/build/Debug-iphoneos &amp;&amp; ${CFGUTIL_PATH} install-app ${UNITY_PROJECT_NAME}.ipa&apos;
            }
        }
        
        stage(&apos;Unity: Build Android&apos;) {
            when { expression { return params.BUILD_ANDROID } }
            steps {
                sh &apos;${UNITY_PATH} -quit -batchmode -projectPath ${UNITY_PROJECT_PATH} -executeMethod BuildManager.BuildAndroidDevelopment&apos;
            }
        }
        
        stage(&apos;Deploy: Android App&apos;) {
            when { expression { return params.BUILD_ANDROID &amp;&amp; params.DEPLOY_ANDROID } }
            steps {
                sh &apos;${ANDROID_SDK_PATH}/platform-tools/adb install ${BUILDS_DIR}/Android/Android.apk &apos;
            }
        }
    }
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>